# .github/workflows/management.yml
name: üöÄ Ultimate VPN System Management V2

on:
  # Allows manual triggering from the GitHub Actions UI for admin tasks
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
        - generate_new_config
        - scan_and_update_default_ip
        - manually_update_regional_ip

      # Inputs for 'generate_new_config'
      user_id:
        description: 'User ID for new config (e.g., my-friend-01)'
        required: false
      duration_days:
        description: 'Subscription duration in days'
        required: false
        default: '30'
      region:
        description: 'IP Region for the config'
        required: false
        type: choice
        options:
        - default
        - de # Germany
        - ir # Iran (if you have a specific IP)
        default: 'default'
      block_porn:
        description: 'Block adult content via DNS?'
        required: false
        type: boolean
        default: false

      # Inputs for 'manually_update_regional_ip'
      target_region:
        description: 'Region to update (e.g., de, ir)'
        required: false
      ip_address:
        description: 'The new clean IP:Port (e.g., 162.159.192.1:2408)'
        required: false

  # Scheduled run for automatic IP scanning
  schedule:
    # Runs every 4 hours to find the best general-purpose IP
    - cron: '0 */4 * * *'

jobs:
  # ==========================================================
  # == JOB 1: Generate a new user configuration
  # ==========================================================
  generate_config:
    name: "‚úÖ Generate New VPN Config"
    if: github.event.inputs.action == 'generate_new_config' && github.event.inputs.user_id != ''
    runs-on: ubuntu-latest
    steps:
      - name: "Sending request to Cloudflare Worker"
        run: |
          echo "Generating config for user: ${{ github.event.inputs.user_id }}"
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -X POST "${{ secrets.WORKER_URL }}/api/admin/generate" \
            -H "Authorization: Bearer ${{ secrets.ADMIN_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{
              "userId": "${{ github.event.inputs.user_id }}",
              "durationDays": ${{ github.event.inputs.duration_days }},
              "region": "${{ github.event.inputs.region }}",
              "blockPorn": ${{ github.event.inputs.block_porn }}
            }')
          
          echo "$response"
          if [[ $(echo "$response" | grep "HTTP_STATUS:200") ]]; then
            echo "‚úÖ Config generated successfully! Check the output above for the subscription URL."
          else
            echo "‚ùå ERROR: Failed to generate config! See the server response above."
            exit 1
          fi

  # ==========================================================
  # == JOB 2: Automatically scan and update the default IP
  # ==========================================================
  scan_and_update_default_ip:
    name: "üõ∞Ô∏è Scan & Update Default WARP IP"
    if: github.event_name == 'schedule' || github.event.inputs.action == 'scan_and_update_default_ip'
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout WarpScanner repository"
        uses: actions/checkout@v4
        with:
          repository: 'ircfspace/warpscan'
          path: 'warpscan'

      - name: "Running WARP Scanner for the best IP"
        id: scanner
        run: |
          cd warpscan
          # Scan with 10 parallel threads for speed
          bash warpscan.sh -p10
          # The script outputs the best IP to result.csv. We read the first line.
          BEST_IP=$(head -n 1 result.csv | awk -F, '{print $1":"$2}')
          if [[ -z "$BEST_IP" ]]; then
            echo "::error::Scanner failed to find a valid IP."
            exit 1
          fi
          echo "Scanner finished. Best IP found: $BEST_IP"
          echo "best_ip=$BEST_IP" >> $GITHUB_OUTPUT

      - name: "Updating Default IP in Cloudflare Worker"
        if: steps.scanner.outputs.best_ip
        run: |
          echo "Sending best IP (${{ steps.scanner.outputs.best_ip }}) to Cloudflare..."
          curl -sf -X POST "${{ secrets.WORKER_URL }}/api/admin/update-ip" \
            -H "Authorization: Bearer ${{ secrets.ADMIN_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"ip": "${{ steps.scanner.outputs.best_ip }}", "region": "default"}'
          echo "‚úÖ Default IP Updated Successfully!"

  # ==========================================================
  # == JOB 3: Manually set an IP for a specific region
  # ==========================================================
  update_regional_ip:
    name: "‚úèÔ∏è Manually Update Regional IP"
    if: github.event.inputs.action == 'manually_update_regional_ip' && github.event.inputs.target_region != '' && github.event.inputs.ip_address != ''
    runs-on: ubuntu-latest
    steps:
      - name: "Updating regional IP in Cloudflare Worker"
        run: |
          echo "Setting IP for region '${{ github.event.inputs.target_region }}' to '${{ github.event.inputs.ip_address }}'"
          curl -sf -X POST "${{ secrets.WORKER_URL }}/api/admin/update-ip" \
            -H "Authorization: Bearer ${{ secrets.ADMIN_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"ip": "${{ github.event.inputs.ip_address }}", "region": "${{ github.event.inputs.target_region }}"}'
          echo "‚úÖ Regional IP updated successfully!"

